/**
 * @file    reymond_labo16.cpp
 * @author  Nicolas Reymond (nicolas.reymond@heig-vd.ch)
 * @brief   Replace all occurrences of a string in a string with two different methods and measure the time taken
 * @version 1.3
 * @date    07.11.2024
 *
 * @copyright Copyright (c) 2024
 *
 */

#include <iostream>
#include <fstream>
#include <string>
#include <chrono>

using namespace std;
using namespace std::chrono;

/**
 * @brief Replaces all occurrences of a substring with another substring in a given string.
 *
 * This function was originally generated by the GPT model and given for the labo 16.
 *
 * @param str The string in which to perform the replacements.
 * @param from The substring to be replaced.
 * @param to The substring to replace with.
 * @return A reference to the modified string `str`.
 */
string &replace_all_GPT(string& str, const string& from, const string& to) {
    if (from.empty())
        return str;
    size_t start_pos = 0;
    while ((start_pos = str.find(from, start_pos)) != string::npos) {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length();
    }
    return str;
}


/**
 * @brief Replaces all occurrences of a substring with another substring in a given string.
 * 
 * This function was originally implemented in labo 14.
 * 
 * @param str The string in which to perform the replacements.
 * @param from The substring to be replaced.
 * @param to The substring to replace with.
 * @return A reference to the modified string `str`.
 */
string &replace_all(string &str, const string &from, const string &to){
    string result;
    size_t start_pos = 0;
    size_t found_pos;
    while ((found_pos = str.find(from, start_pos)) != string::npos)
    {
        result.append(str, start_pos, found_pos - start_pos);
        result.append(to);
        start_pos = found_pos + from.length();
    }
    result.append(str, start_pos, str.length() - start_pos);
    str = result;
    return str;
}

/**
 * @brief Processes a file by reading its contents, modifying the string based on the given parameters, and measuring the time taken for the modifications.
 * 
 * @param filename The name of the file to be processed.
 * @param k An integer that determines how the string is modified:
 *          - If k > 0, the string is duplicated k times.
 *          - If k < 0, the string is reduced in size by a factor of 2^(-k).
 * @param option A string that specifies which replacement function to use:
 *          - If "GPT", the function replace_all_GPT is used.
 *          - Otherwise, the function replace_all is used.
 * 
 * The function reads the entire file into a string, modifies the string based on the value of k, and then performs a series of replacements on the string.
 * It measures and outputs the length of the final string, the time taken for the replacements, and the option used.
 */
void process_file(const string& filename, int k, const string& option) {
    ifstream file(filename);
    if (!file) {
        cerr << "Error opening file: " << filename << endl;
        return;
    }

    string str((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
    file.close();

    // Modify the string based on the value of k
    if (k > 0) {
        for (int i = 0; i < k; ++i) {
            str += str;
        }
    } else if (k < 0) {
        str.resize(str.length() / (1 << -k));
    }

    // Start measuring time
    high_resolution_clock::time_point t1 = high_resolution_clock::now();

    if (option == "GPT") {
        str = replace_all_GPT(str, "de ", "xYxYx");
        str = replace_all_GPT(str, "xYxYx", "de ");
    } else {
        str = replace_all(str, "de ", "xYxYx");
        str = replace_all(str, "xYxYx", "de ");
    }

    // Stop measuring time
    duration<double> time_span = duration_cast<duration<double>>(high_resolution_clock::now() - t1);

    // Output results (used to get all the info to make the report)
    cout << "Length of the string: " << str.length() << endl;
    cout << "Time taken: " << fixed << time_span.count() << " seconds" << endl;
    cout << "Used option: " << (option == "GPT" ? "GPT" : "NRE") << endl;
}

int main(int argc, char* argv[]) {
    if (argc < 4 || argv[1] == "-h" || argv[1] == "--help") {
        cerr << "Usage: " << argv[0] << " <filename> <k> <option>" << endl
             << "Example: " << argv[0] << " file.txt 2 GPT" << endl
             << "Arguments:" << endl
             << "  <filename> - The name of the file to be processed." << endl
             << "  <k>        - An integer that determines how the string is modified." << endl
             << "  <option>   - A string that specifies which replacement function to use." << endl;
            
        return 1;
    }

    string filename = argv[1];
    int k = stoi(argv[2]);
    string option = argv[3] ? argv[3] : "NRE";

    process_file(filename, k, option);

    return 0;
}